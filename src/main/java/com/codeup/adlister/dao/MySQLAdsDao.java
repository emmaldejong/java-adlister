package com.codeup.adlister.dao;

import com.codeup.adlister.Config;
import com.codeup.adlister.models.Ad;
import com.mysql.cj.jdbc.Driver;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySQLAdsDao implements Ads {
    private Connection connection = null;

    public MySQLAdsDao(Config config) {
        try {
            DriverManager.registerDriver(new Driver());
            connection = DriverManager.getConnection(
                config.getUrl(),
                config.getUsername(),
                config.getPassword()
            );
        } catch (SQLException e) {
            throw new RuntimeException("Error connecting to the database!", e);
        }
    }

    @Override
    public List<Ad> all() {
        Statement stmt = null;
        try {
            stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM ads");
            return createAdsFromResults(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving all ads.", e);
        }
    }

    //statements send "raw" strings to the database v. prepared stmts have placeholders and properly deal with user input

    //ResultSets
    //multiple results that we want to look at -- while(rs.next());
    //just one result
        //if(rs.next()) --- explicit error handling
        //rs.next() just by itself --- handle errors through exceptions

    //SQL Injection
        //Search Form for Ads, somewhere on the backend
            //sql query: SELECT * FROM ads WHERE title LIKE '%?%';
            //where '?' is whatever the user has typed in
                //user input: cute puppies
                //SELECT * FROM ads WHERE title LIKE '%cute puppies%';
                    //user input: cute puppies' (invalid sql will cause syntax errors), the backend would need to be SELECT * FROM ads WHERE title LIKE '%cute puppies\%'; (\ is escaping the user input)
            //that's why we use prepared statements so we don't have to worry about escaping things
    @Override
    public Long insert(Ad ad) {
        try {
            String query = "INSERT INTO ads(user_id,title, description) VALUES (?,?,?)";
            PreparedStatement ps = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS); //whatever values are generated by the database (what we've told it to), this is how we gain access to that
            ps.setLong(1,1);
            ps.setString(2,ad.getTitle());
            ps.setString(3, ad.getDescription());
            ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();
            rs.next();
            return rs.getLong(1);
        } catch (SQLException e) {
            throw new RuntimeException("Error creating a new ad.", e);
        }
    }

    private Ad extractAd(ResultSet rs) throws SQLException {
        return new Ad(
            rs.getLong("id"),
            rs.getLong("user_id"),
            rs.getString("title"),
            rs.getString("description")
        );
    }

    private List<Ad> createAdsFromResults(ResultSet rs) throws SQLException {
        List<Ad> ads = new ArrayList<>();
        while (rs.next()) {
            ads.add(extractAd(rs));
        }
        return ads;
    }
}
